
DSA LAB TASK 07 

Name: Basit Ali 

SAP: 54596

 Question no 1:
#include <iostream>
using namespace std;

int main() {
int arr[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
int size = 10;
int target;

cout << "Enter target value: ";
cin >> target;

int left = 0, right = size - 1;
while (left <= right)
{
int mid = (left + right)/2;
cout << "Active items: ";
for (int i = left; i <= right; i++) {
cout << arr[i] << " ";
        }
cout << "\n";

        if (arr[mid] == target) {
            cout << "Target found at index: " << mid <<endl;
            return 0; 
        } 
        else if (arr[mid] < target)
    {
    left = mid + 1; // Search right
    }
else
{
right = mid - 1;
        }
    }

    cout << "Target not found." << endl;
    return 0;
}
 
Question no 2:

#include <iostream>
using namespace std;
int main() {
    int arr[] = {1, 2, 2, 3, 4, 5, 5, 6, 7, 8};
    int size = 10;
    int target;

    cout << "Enter target value: ";
    cin >> target;

    int left = 0, right = size - 1;
    int firstOccurrence = -1; 

    while (left <= right) {
        int mid = (left + right) / 2;
        cout << "Active items: ";
        for (int i = left; i <= right; i++) {
            std::cout << arr[i] << " ";
        }
        cout << "\n";

        if (arr[mid] == target) {
            firstOccurrence = mid; 
            right = mid - 1;
            } else if (arr[mid] < target) {
            left = mid + 1;
            }
            else
            {
            right = mid - 1; 
        }
    }

    if (firstOccurrence != -1) {
      cout << "First occurrence of target found at index: " << firstOccurrence << endl;
    } else {
        cout << "Target not found." << endl;
    }

    return 0;
}

 

Question no 3:
#include <iostream>
using namespace std;
int main() {
    int arr[] = {1, 2, 5, 8, 4, 5, 3, 6, 7, 8};
    int size = 10;
    int target;
   cout << "Enter target value: ";
   cin >> target;

    int left = 0, right = size - 1;
    int lastOccurrence = -1; 

    while (left <= right) 
    {
        int mid = (left + right) / 2;

        cout << "Active items: ";
        for (int i = left; i <= right; i++) {
           cout << arr[i] << " ";
        }
      cout << "\n";

        if (arr[mid] == target) {
            lastOccurrence = mid;
            right = mid - 1;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    if (lastOccurrence != -1) {
        cout << "Last occurrence of target found at index: " << lastOccurrence << endl;
    } else {
        cout << "Target not found." << endl;
    }

    return 0;
}
 


Question no 4:
#include <iostream>

using namespace std;

int main() {
    int arr[] = {1, 2, 2, 3, 4, 5, 5, 6, 7, 8};
    int size = 10; 
    int target;

    cout << "Enter target value: ";
    cin >> target;

    int left = 0, right = size - 1;
    int firstOccurrence = -1, lastOccurrence = -1; 

    while (left <= right) {
        int mid = (left + right) / 2;

        cout << "Active items: ";
        for (int i = left; i <= right; i++) {
            cout << arr[i] << " ";
        }
        cout << "\n";

        if (arr[mid] < target) {
            left = mid + 1; 
        } else {
            right = mid - 1; 
            if (arr[mid] == target) {
                firstOccurrence = mid; 
            }
        }
    }

    left = 0; right = size - 1;
    while (left <= right) {
        int mid = (left + right) / 2;

        cout << "Active items: ";
        for (int i = left; i <= right; i++) {
            cout << arr[i] << " ";
        }
        cout << "\n";

        if (arr[mid] > target) {
            right = mid - 1; 
        } else {
            left = mid + 1; 
            if (arr[mid] == target) {
                lastOccurrence = mid; 
            }
        }
    }

    if (firstOccurrence != -1 && lastOccurrence != -1) {
        int count = lastOccurrence - firstOccurrence + 1;
        cout << "Number of occurrences of target found: " << count << endl;
    } else {
        cout << "Target not found." << endl;
    }

    return 0;
}
